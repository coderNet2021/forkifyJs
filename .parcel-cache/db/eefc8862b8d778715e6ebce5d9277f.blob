var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('prelude-ls');
var _urlImgIconsSvg = require('url:../../img/icons.svg');
var _urlImgIconsSvgDefault = _parcelHelpers.interopDefault(_urlImgIconsSvg);
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
class View {
  constructor() {
    _defineProperty(this, "_data", void 0);
  }
  _clear() {
    this._parentElement.innerHTML = '';
  }
  /*public APIs*/
  render(data) {
    if (!data || Array.isArray(data) && data.length === 0) {
      cosole.log('errorr data lent');
      return this.renderError();
    }
    this._data = data;
    const markup = this._generateMarkup();
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
  renderSpinner() {
    const markup = `
    <div class="spinner">
    <svg>
      <use href="${_urlImgIconsSvgDefault.default}#icon-loader"></use>
    </svg>
  </div>
    `;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
  renderMessage(message = this._message) {
    const markup = ` <div class="message">
    <div>
      <svg>
        <use href="${_urlImgIconsSvgDefault.default}#icon-smile"></use>
      </svg>
    </div>
    <p>${message}</p>
  </div>`;
    // console.log(message);
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
  renderError(message = this._errorMessage) {
    const markup = ` <div class="error">
    <div>
      <svg>
        <use href="${_urlImgIconsSvgDefault.default}#icon-alert-triangle"></use>
      </svg>
    </div>
    <p>${message}</p>
  </div>`;
    // console.log(message);
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
}
exports.default = View;
